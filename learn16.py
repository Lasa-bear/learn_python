# #python 文件I/O

import os
# # 打印到屏幕
# # 最简单的输出方法是用print语句，你可以给它传递零个或多个用逗号隔开的表达式。此函数把你传递的表达式转换成一个字符串表达式，并将结果写到标准输出如下：
#
#
# print
# "Python 是一个非常棒的语言，不是吗？"
# 你的标准屏幕上会产生以下结果：
#
# Python
# 是一个非常棒的语言，不是吗？
# 读取键盘输入
# Python提供了两个内置函数从标准输入读入一行文本，默认的标准输入是键盘。如下：
#
# raw_input
# input
# raw_input函数
# raw_input([prompt])
# 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：
#
# # !/usr/bin/python
# # -*- coding: UTF-8 -*-
#
# str = raw_input("请输入：")
# print
# "你输入的内容是: ", str
# 这将提示你输入任意字符串，然后在屏幕上显示相同的字符串。当我输入
# "Hello Python！"，它的输出如下：
#
# 请输入：Hello
# Python！
# 你输入的内容是: Hello
# Python！
# input函数
# input([prompt])
# 函数和
# raw_input([prompt])
# 函数基本类似，但是
# input
# 可以接收一个Python表达式作为输入，并将运算结果返回。
#
# # !/usr/bin/python
# # -*- coding: UTF-8 -*-
#
# str = input("请输入：")
# print
# "你输入的内容是: ", str
# 这会产生如下的对应着输入的结果：
#
# 请输入：[x * 5 for x in range(2, 10, 2)]
# 你输入的内容是: [10, 20, 30, 40]

#打开和关闭文件
'''现在，你可以向标准输入和输出进行读写，现在，来看看怎么读写实际的数据文件
python提供了必要的函数和方法进行默认情况下的文件基本操作你可以用file对象做大部分的文件操作
'''

#open函数
#你必须先用python内置的 open（）函数打开一个文件，创建一个file对象，相关的方法可以调用它进行读写

# file object = open(file_name [, access_mode][, buffering])
# 各个参数的细节如下：
#
# file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。
# access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。
# buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。
# 不同模式打开文件的完全列表：
# r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
# rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。
# r+	打开一个文件用于读写。文件指针将会放在文件的开头。
# rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。
# w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
# w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
# a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
# ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。
# close()方法
# File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。
#
# 当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 close（）方法关闭文件是一个很好的习惯。
#
# 语法：
fo = open("foo.txt","w")
print('文件名：',fo.name)
print('是否已关闭;',fo.closed)
print('访问模式：',fo.mode)
fo.close()

# 读写文件：
#
# file对象提供了一系列方法，能让我们的文件访问更轻松。来看看如何使用read()和write()方法来读取和写入文件。
#
# write()方法
# write()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。
#
# write()方法不会在字符串的结尾添加换行符('\n')：
#
fo = open('foo.txt','w')
fo.write('www.baidu.com\nnozuonodie\n')
fo.close()
# read()方法
# read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。

fo = open('foo.txt','r+')
str = fo.read(10)
print(str)
fo.close()

# 文件定位
# tell()方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。
#
# seek（offset [,from]）方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。
#
# 如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。
fo = open("foo.txt", "r+")
str = fo.read(10)
print("读取的字符串是 : ", str)

# 查找当前位置
position = fo.tell()
print("当前文件位置 : ", position)

# 把指针再次重新定位到文件开头
position = fo.seek(0, 0)
str = fo.read(10)
print("重新读取字符串 : ", str)
# 关闭打开的文件
fo.close()
# 重命名和删除文件
# Python的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。
#
# 要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。
#
# rename()方法：
#
# rename()方法需要两个参数，当前的文件名和新文件名。
#os.rename('foo.txt','foo1.txt')

# remove()方法
# 你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。
# os.remove('foo1.txt')
os.remove('foo.txt')
